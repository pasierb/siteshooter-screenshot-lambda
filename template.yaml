# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  siteshooter-screenshot-api

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  createScreenshot:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-screenshot.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 1024
      Timeout: 100
      Role: !GetAtt createScreenshotRole.Arn
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Environment:
        Variables:
          OUTPUT_BUCKET_NAME: !Ref outputBucket
          CLOUDFRONT_DISTRIBUTION_DOMAIN_NAME: !GetAtt screenshotsCloudfront.DomainName
      Events:
        Api:
          Type: Api
          Properties:
            Path: "/"
            Method: POST
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable
  cloudfrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Cloudfront OAI for screenshots access

  # S3 Bucket for storing screenshots
  outputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: siteshooter-screenshots

  outputBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref outputBucket
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action: s3:GetObject
          Resource: !Sub "${outputBucket.Arn}/*"
        - Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${cloudfrontOriginAccessIdentity}"
          Action: s3:GetObject
          Resource: !Sub "${outputBucket.Arn}/*"

  createScreenshotRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource: !Sub "${outputBucket.Arn}/*"
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'

  # Cloudfront distribution to serve screenshots from S3
  screenshotsCloudfront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: screenshotBucketS3Origin
            DomainName: !Sub "${outputBucket}.s3.eu-west-1.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${cloudfrontOriginAccessIdentity}"
        Enabled: true
        Comment: Cloudfront distribution for screenshots
        DefaultRootObject: index.html
        # Aliases:
        # - mysite.example.com
        # - yoursite.example.com
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId: screenshotBucketS3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          # TrustedSigners:
          # - 1234567890EX
          # - 1234567891EX
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_200
        # Restrictions:
        #   GeoRestriction:
        #     RestrictionType: whitelist
        #     Locations:
        #     - AQ
        #     - CV
        ViewerCertificate:
          CloudFrontDefaultCertificate: true


Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
